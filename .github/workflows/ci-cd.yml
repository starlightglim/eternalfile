name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install client dependencies
        run: |
          cd client
          npm ci
          
      - name: Run client linting
        run: |
          cd client
          npm run lint
          
      - name: Run client tests
        run: |
          cd client
          npm test -- --passWithNoTests
          
      - name: Install server dependencies
        run: |
          cd server
          npm ci
          
      - name: Run server linting
        run: |
          cd server
          npm run lint || echo "Linting issues found"
          
      - name: Run server tests
        run: |
          cd server
          npm test -- --passWithNoTests

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push client
        uses: docker/build-push-action@v2
        with:
          context: ./client
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/eternalfile-client:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/eternalfile-client:${{ github.sha }}
            
      - name: Build and push server
        uses: docker/build-push-action@v2
        with:
          context: ./server
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/eternalfile-server:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/eternalfile-server:${{ github.sha }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd /opt/eternalfile
            docker-compose pull
            docker-compose up -d
            docker system prune -af 